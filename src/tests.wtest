import player.*
import movil.*
import wollok.game.*
import utils.*
import covid.*
import display.*
import miposicion.*
import barrera.*
import bar.*
import powerup.*

describe "tests"
{
	fixture 
	{
		game.cellSize(utils.cellSize())
		//tamaÃ±o en celdas
		game.width(utils.getPixel(580)) 
		game.height(utils.getPixel(660))
		
		player.init()
		covid.init()
		gestorJugadores.agregarJugador(player)
		gestorJugadores.agregarJugador(covid)
		
		barrera.init()
		game.addVisual(barrera)

		//solo para que los test corran
		game.onTick(5000, "mover pjs", {})
		game.onTick(5000, "timer", { })
		game.onTick(5000, "covidBar", {})
		
		player.displayTimer().valor(2)
		utils.juegoIniciado(true)
	}
/**TESTS DE MOVIL*/
	test "borde derecho"
	{
		player.direccion(derecha)
		player.mover()
		
		assert.equals(game.width()-player.anchoImg(), player.position().x())
	}
	test "borde izquierdo"
	{
		player.direccion(izquierda)
		player.position().x(3)
		player.mover()
		
		assert.equals(0, player.position().x())
	}
	
	test "borde inferior"
	{
		player.direccion(abajo)
		player.mover()
		
		assert.equals(0, player.position().y())
	}
	test "borde superior"
	{
		player.direccion(arriba)
		player.position().y(game.height()-player.alturaImg())
		player.mover()
		
		assert.equals(utils.alturaJuego()-player.alturaImg(), player.position().x())
	}
	test "zona de barreras"
	{
		assert.notThat(player.enZonaDeBarreras())
		player.position().x(game.width()/2)
		player.position().y(game.height()/2)
		player.verificarZonaDeBarreras()
		assert.that(player.enZonaDeBarreras())
	}
	test "restriccion de direccion por barreras horizontales"
	{
		player.direccion(quieto)
		player.position().x(game.width()/2)
		player.position().y(game.height()/2)
		player.verificarZonaDeBarreras()
		
		player.cambiarDireccion(arriba)
		assert.equals(quieto, player.direccion())
		player.cambiarDireccion(abajo)
		assert.equals(quieto, player.direccion())
		player.cambiarDireccion(izquierda)
		assert.equals(izquierda, player.direccion())
		player.cambiarDireccion(derecha)
		assert.equals(derecha, player.direccion())
		
	}
	test "restriccion de direccion por barreras verticales"
	{
		player.direccion(quieto)
		barrera.cambiar() //empieza horizontal, pasa a vertical
		player.position().x(game.width()/2)
		player.position().y(game.height()/2)
		player.verificarZonaDeBarreras()
		
		player.cambiarDireccion(izquierda)
		assert.equals(quieto, player.direccion())
		player.cambiarDireccion(derecha)
		assert.equals(quieto, player.direccion())
		player.cambiarDireccion(abajo)
		assert.equals(abajo, player.direccion())
		player.cambiarDireccion(arriba)
		assert.equals(arriba, player.direccion())
	}
/**TESTS DE PLAYER */
	test "puede ganar si se termina el tiempo"
	{
		// queda 2 seg
		player.avanzarTimer() 
		// queda 1 seg
		player.avanzarTimer() 
		// queda 0 seg
		// tira excepcion por los ontick, pero ocurre despues del cambio de estado
		assert.throwsException({player.avanzarTimer()})
		assert.equals(0, player.displayTimer().valor())
		assert.equals(ganador, player.estado())
	}
/**TESTS DE COVID */
	test "covid no es contagioso a mas de 100u de distancia"
	{
		covidBar.actualizar(covid.obtenerDistancia(player))
		assert.equals(0, covidBar.valor())
	}
	test "covid es contagioso a menos de 100u de distancia"
	{
		player.position().x(covid.position().x()+20)
		player.position().y(covid.position().y())
		
		covidBar.actualizar(covid.obtenerDistancia(player))
		assert.equals(4, covidBar.valor())
	}
	test "el jugador pierde si se contagia covid"
	{
		player.position().x(covid.position().x()+20)
		player.position().y(covid.position().y())
		covidBar.valor(97)
		//tira excepcion por los ontick, pero ocurre despues del cambio de estado
		assert.throwsException({covidBar.actualizar(covid.obtenerDistancia(player))})
		assert.equals(100, covidBar.valor())
		assert.equals(perdedor, player.estado())
	}
/**POWERUPS*/
	test "un jugador puede agarrar un powerup y este es alguno de los que tiene disponibles"
	{
		assert.equals(0, player.powerUps().size())
		
		cajaSorpresa.aparecer()
		player.position().x(cajaSorpresa.position().x())
		player.position().y(cajaSorpresa.position().y())
		cajaSorpresa.verificarColisiones()
		
		assert.equals(1, player.powerUps().size())
		assert.that(player.powerUpsPosibles().contains(player.powerUps().first()))
	}
	test "no puede agarrar mas de 4 powerups unicos"
	{
		const range = new Range(start = 1, end = 10)
		range.forEach{a => player.agregarPowerUp()}
		//intento agregar 10, verifico que sean 4 powers
		//puede llegar a ser menos de 4 si se repiten muchos
		assert.that(player.powerUps().size() <=4)
		
		const powers = player.powerUps()
		//Verifico que todos los powers se encuentran solo 1 vez en la lista
		assert.that(powers.all{power => powers.occurrencesOf(power) == 1})
		
	}
	test "el jugador puede usar un powerup"
	{
		cajaSorpresa.aparecer()
		player.position().x(cajaSorpresa.position().x())
		player.position().y(cajaSorpresa.position().y())
		cajaSorpresa.verificarColisiones()
		
		assert.equals(1, player.powerUps().size())
		player.usarPowerUp()
		assert.equals(0, player.powerUps().size())
	}
}
